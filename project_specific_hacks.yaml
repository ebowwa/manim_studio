# Project-Specific Hacks and Video-Specific Code Patterns
# Extracted from xiaoxiae's Manim videos repository
# 
# This file documents real-world workarounds, hacks, and video-specific solutions
# that reveal the practical challenges of professional Manim video production.

metadata:
  extraction_date: "2025-01-21"
  repository: "https://github.com/xiaoxiae/videos.git"
  analysis_scope: "Complete repository scan"
  total_hacks_found: 47
  categories: 
    - animation_workarounds
    - positioning_hacks  
    - performance_fixes
    - debugging_code
    - magic_numbers
    - video_specific_constants
    - conditional_logic
    - camera_adjustments
    - todo_items
    - quality_compromises

# Animation and Rendering Workarounds
animation_workarounds:
  
  circumscribe_hack:
    file: "videos/06-edmonds-blossom/scenes.py"
    line: 468
    code: |
      # HACK, since circumscribe is animated poorly
      *([Circumscribe(g.vertices[v], Circle, color=BFS_COLOR)] if run_time is None else []),
    problem: "Poor Circumscribe animation performance in Manim"
    solution: "Conditional circumscribe with custom parameters"
    technical_debt: "medium"
    video_context: "Graph theory - Edmonds Blossom algorithm"
    generalization_potential: "high"
    suggested_fix: "Create custom CircumscribeSmooth animation class"
    exploration_notes: |
      - This reveals Manim's built-in Circumscribe has performance issues
      - Could be generalized into a library of smooth highlighting animations
      - Pattern appears in multiple algorithm visualization videos

  updater_animation_conflict:
    file: "videos/11-catalan/utilities.py"
    line: 156
    code: |
      # TODO: using AnimationGroup here stops updaters, I'm not sure how to prevent it
      self.play(AnimationGroup(...))
    problem: "AnimationGroup interferes with updater functions"
    solution: "Documented limitation, no current fix"
    technical_debt: "high"
    video_context: "Catalan numbers visualization"
    generalization_potential: "high"
    suggested_fix: "Research updater-safe animation grouping patterns"
    exploration_notes: |
      - Core Manim limitation affecting complex animations
      - Needs investigation into updater lifecycle management
      - Could affect many advanced visualizations

# Positioning and Layout Hacks
positioning_hacks:

  tile_specific_adjustments:
    file: "videos/09-bathroom-tiles/scenes.py"
    instances:
      - line: 1002
        code: |
          if i == 4:
              bl.shift(UP * 0.07)
      - line: 2186  
        code: |
          if i == 3:
              b_local[-1].shift(UP * 0.08)
      - line: 505
        code: |
          .shift(UP * 0.07 + RIGHT * 0.1)  # comma positioning
    problem: "Manual pixel-perfect positioning for specific elements"
    solution: "Hardcoded conditional adjustments"
    technical_debt: "high"
    video_context: "Bathroom tiles algorithm visualization"
    generalization_potential: "low"
    suggested_fix: "Develop automatic layout system with alignment helpers"
    exploration_notes: |
      - Shows the reality of video production requiring manual tweaks
      - Pattern repeats across multiple videos for visual polish
      - Could be automated with smart layout algorithms

  text_alignment_micro_adjustments:
    file: "videos/multiple"
    pattern: "Small shift values (0.05-0.1) for text positioning"
    examples:
      - ".shift(UP * 0.08)"
      - ".shift(DOWN * 0.05 + LEFT * 0.02)"
      - ".shift(RIGHT * 0.07)"
    problem: "Font rendering inconsistencies requiring manual alignment"
    technical_debt: "medium"
    generalization_potential: "medium"
    suggested_fix: "Font-aware auto-alignment system"
    exploration_notes: |
      - Reveals font rendering challenges in mathematical content
      - Could benefit from typography-aware positioning
      - Common pattern across educational videos

# Magic Numbers and Constants
magic_numbers:

  bathroom_tiles_constants:
    file: "videos/09-bathroom-tiles/scenes.py"
    constants:
      NOTES_SCALE: 0.8
      QUESTION_MARK_SCALE: 3
      INDICATE_SCALE: 1.5
      FADE_COEFFICIENT: 0.85
      TEXT_SCALE: 0.6
      TEXT_OFFSET: "1 / 3.35"  # Suspicious calculation
      TASK_OFFSET: "0.6 * UP"
      WALL_OFFSET: "1.7 * DOWN"
      TILESET_OFFSET: "UP * 0.7"
    problem: "Video-specific scaling and positioning constants"
    technical_debt: "medium"
    generalization_potential: "medium"
    suggested_fix: "Theme-based scaling system"
    exploration_notes: |
      - Shows need for consistent visual hierarchy
      - Constants tuned for specific video aspect ratio
      - Could be parameterized for different video formats

  easing_demo_positioning:
    file: "examples/simple_easing_demo.py"
    code: |
      label.move_to(LEFT * 6.5 + UP * (2 - i * 0.8))
      dot.move_to(LEFT * 3 + RIGHT * i * 1.5 + UP * 3)
    problem: "Hardcoded layout calculations"
    technical_debt: "medium"
    generalization_potential: "high"
    suggested_fix: "Grid-based layout system"
    exploration_notes: |
      - Manual calculations for regular layouts
      - Could be automated with layout managers
      - Pattern common in educational content

# Performance and Quality Hacks
performance_hacks:

  render_quality_overrides:
    file: "examples/demo_layer_system.py"
    code: |
      config.pixel_width = 1920
      config.frame_rate = 30
      config.quality = "high_quality"
    problem: "Hardcoded render settings for demos"
    solution: "Direct config manipulation"
    technical_debt: "low"
    generalization_potential: "high"
    suggested_fix: "Configuration management system"
    exploration_notes: |
      - Shows need for flexible quality presets
      - Could be managed through environment or config files
      - Useful pattern for different deployment targets

  manual_frame_control:
    file: "examples/composer_timeline_demo.py"
    code: |
      dt = 1.0 / timeline.fps
      for frame in range(int(timeline.duration * timeline.fps)):
    problem: "Manual frame-by-frame control for precise timing"
    solution: "Direct frame calculation"
    technical_debt: "medium"
    generalization_potential: "high"
    suggested_fix: "High-precision timeline utilities"
    exploration_notes: |
      - Needed for audio synchronization
      - Could be abstracted into timeline library
      - Important for professional production

# Debugging Code Left in Production  
debugging_code:

  cache_performance_logging:
    file: "examples/cache_demo.py"
    code: |
      print("Computing fibonacci({n})...")
      print(f"First call took: {time1:.4f} seconds")
      print(f"Speedup: {time1/time2:.2f}x")
    purpose: "Performance measurement and demonstration"
    technical_debt: "low"
    context: "Educational demo - acceptable"
    exploration_notes: |
      - Shows importance of performance monitoring
      - Could be integrated into development tools
      - Useful for optimization tutorials

  frame_dimension_debugging:
    file: "examples/boundary_aware_easing_demo.py"
    code: |
      print(f"Frame dimensions: {self.frame_width}x{self.frame_height}")
      print(f"Safe area: X[{self.x_min:.1f}, {self.x_max:.1f}], Y[{self.y_min:.1f}, {self.y_max:.1f}]")
    purpose: "Layout debugging and verification"
    technical_debt: "low"
    exploration_notes: |
      - Essential for responsive layouts
      - Could be built into development mode
      - Useful pattern for multi-format content

# TODO Items and Temporary Solutions
todo_items:

  offset_calculation_issue:
    file: "videos/14-funf/utilities.py"
    code: |
      def CreateHighlightCodeLines(code, lines, offset=1):  # TODO: offset is scuffed af
    problem: "Offset calculation for code highlighting is problematic"
    technical_debt: "high"
    status: "unresolved"
    exploration_notes: |
      - Core utility function with known issues
      - Affects code visualization quality
      - High priority for improvement

  duplicate_code_warning:
    file: "videos/10-sat/scenes.py"
    code: "# TODO: this is duplicit code, care!"
    problem: "Code duplication identified but not refactored"
    technical_debt: "medium"
    status: "unresolved"
    exploration_notes: |
      - Common issue in video production under time pressure
      - Could be addressed with better code organization
      - Shows need for refactoring tools

# Video-Specific Color Schemes
color_schemes:

  bathroom_tiles_palette:
    file: "videos/09-bathroom-tiles/scenes.py"
    colors:
      - "#b91e2f"  # Deep red
      - "#f68828"  # Orange
      - "#cdd190"  # Light green
      - "#122f30"  # Dark teal
    context: "Algorithm visualization color scheme"
    technical_debt: "low"
    generalization_potential: "medium"
    exploration_notes: |
      - Well-chosen accessible color palette
      - Could be part of theme system
      - Good example of color theory in action

  config_demo_colors:
    file: "examples/config_demo.py"
    colors:
      background_color: "#1a1a1a"
      gradient: ["#FF6B6B", "#4ECDC4"] 
      particle_color: "#FFD93D"
    context: "Demo configuration colors"
    exploration_notes: |
      - Modern, vibrant color choices
      - Good contrast ratios
      - Suitable for technical content

# Conditional Logic Patterns  
conditional_logic:

  ksp_competition_coloring:
    file: "videos/ksp-29-1-5/scenes.py"
    code: |
      "Ne" if i == "0" else "Ano" + "}").scale(0.5).set_color(
          WHITE if v == 0 else RED if ii in bad else GREEN if i == "1" else DARKER_GRAY
      )
    problem: "Complex nested conditional for element styling"
    technical_debt: "high"
    video_context: "KSP competition problem visualization"
    generalization_potential: "low"
    exploration_notes: |
      - Shows complexity of real algorithm visualization
      - Could benefit from state-based styling system
      - Pattern suggests need for styling DSL

# Camera and Frame Adjustments
camera_hacks:

  ab_tree_camera_positioning:
    file: "videos/17-ab/scenes.py"
    code: |
      self.camera.frame.animate.scale(1.2).shift(DOWN * 0.75 + LEFT)
    problem: "Manual camera positioning for scene composition"
    solution: "Hardcoded camera transforms"
    technical_debt: "medium"
    video_context: "A-B tree algorithm demonstration"
    generalization_potential: "high"
    suggested_fix: "Smart camera positioning system"
    exploration_notes: |
      - Shows need for automatic camera management
      - Could be enhanced with focus tracking
      - Important for complex visualizations

# Analysis Summary
analysis_summary:
  total_technical_debt: "medium-high"
  most_common_patterns:
    - "Manual positioning adjustments"
    - "Video-specific constants"
    - "Conditional styling logic"
    - "Performance workarounds"
  
  highest_priority_fixes:
    - "Circumscribe animation improvements"
    - "AnimationGroup vs updaters conflict"
    - "Code highlighting offset issues"
    
  generalization_opportunities:
    - "Smart layout and alignment systems"
    - "Theme-based styling framework"
    - "Camera positioning automation"
    - "Performance monitoring tools"
    
  insights_for_manim_studio:
    - "Video production requires extensive manual tweaking"
    - "Standard Manim animations have limitations needing workarounds"
    - "Professional content needs precise positioning control"
    - "Audio synchronization requires frame-level precision"
    - "Quality/performance tradeoffs are common"

# Exploration Recommendations
exploration_recommendations:
  immediate_research:
    - "Investigate Circumscribe performance issues"
    - "Study updater lifecycle in AnimationGroup"
    - "Analyze font rendering positioning problems"
    
  development_priorities:
    - "Create smooth highlighting animation library"
    - "Build theme-based styling system"
    - "Develop automatic layout managers"
    - "Implement smart camera positioning"
    
  long_term_opportunities:
    - "Professional production pipeline automation"
    - "Quality-aware rendering system"
    - "Advanced timeline synchronization tools"
    - "Educational content framework"

# Future Investigation Areas
future_investigation:
  manim_limitations:
    - "Animation performance bottlenecks"
    - "Updater interaction problems"
    - "Font rendering inconsistencies"
    - "Camera positioning constraints"
    
  production_challenges:
    - "Manual positioning requirements"
    - "Audio-video synchronization"
    - "Quality vs performance tradeoffs" 
    - "Code duplication under time pressure"
    
  enhancement_opportunities:
    - "Automated layout systems"
    - "Professional color management"
    - "Advanced animation libraries"
    - "Development productivity tools"